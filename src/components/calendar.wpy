<style lang="less">
.com-calendar__container {
  .schedule-container {
    background: #fff;
    .calendar-container {
      .calendar-header {
        display: flex;
        text-align: center;
        justify-content: center;
        align-items: center;
        height: 100rpx;
        .prev-month,
        .next-month {
          flex: 0 0 180rpx;
        }
        .cur-month {
          flex: 1;
        }
      }
      .calendar-week {
        display: flex;
        justify-content: center;
        align-items: center;
        border-bottom: 1px solid #efefef;
        .weeks-grid {
          text-align: center;
          flex: 107.1428571429rpx;
          color: #dd5044;
        }
      }
      .calendar-days {
        display: flex;
        flex-wrap: wrap;
        .days-grid {
          // text-align: center;
          height: 100rpx;
          // width: 107.1428571429rpx;
          width: 14.2857%;
          // flex: 0 0 14.2857%;
          border-bottom: 1px solid #eee;
          .day {
            margin: 20rpx auto;
            width: 60rpx;
            height: 60rpx;
            line-height: 60rpx;
            text-align: center;
            font-size: 28rpx;
          }
          .day-active {
            border: 1px solid #dd5044;
            border-radius: 50%;
          }
        }
      }
      .calendar-close {
        margin-top: 60rpx;
        image {
          display: block;
          margin: 0 auto;
          width: 60rpx;
          height: 60rpx;
        }
      }
    }
  }
}
</style>
<template>
  <view class="com-calendar__container">
    <view class="schedule-container">
    <!-- 日历表📅 -->
    <wxc-mask status="{{maskStatus}}" background-color="#fff" opacity="1" class="mask-animation">
      <view class="calendar-container">
        <view class="calendar-header">
          <view class="prev-month" @tap="handleCalendar" data-action="prev">上一月</view>
          <view class="cur-month">{{currentDate}}</view>
          <view class="next-month" @tap="handleCalendar" data-action="next">下一月</view>  
        </view>
        <view class="calendar-week">
          <repeat for="{{weeks_ch}}" item="week" key="key">
            <view class="weeks-grid">{{week}}</view>
          </repeat>
        </view>
        <view class="calendar-days">
          <block wx:if="{{hasEmptyGrid}}">
            <view class="days-grid" wx:for="{{empytGrids}}" wx:key="{{index}}" data-idx="{{index}}">
            </view>    
          </block>
          <repeat wx:for="{{days}}" key="key" index="index" item="item">
            <view class="days-grid" @tap="handleDayItem({{item.dayDate}})">
              <view class="day {{item.choosed ? 'day-active' : ''}}">{{item.day}}</view>
            </view>
          </repeat>
        </view>
      </view>
    </wxc-mask>
    </view>
  </view>
</template>
<script>
import wepy from "wepy";
import moment from "moment";

export default class Calendar extends wepy.component {
  props = {
    monthOfDays: {
      type: Array,
      default: []
    }
  };
  data = {
    currentDate: moment().format("YYYY-MM-DD"), // 获取当前日期 YYYY-MM-DD
    thisMonthDays: [], // 获取当前月一共多少天
    currentMonth: parseInt(moment().format("MM")), // 当前月份
    currentYear: moment().year(), // 当前年份
    currentDay: moment().dayOfYear(), // 当前天
    days: [], // 每个月的每天数组
    weeks_ch: [],
    empytGrids: [],
    hasEmptyGrid: false,
    maskStatus: "hide",
    todayEntity: [],
    currentDayData: []
  };
  methods = {
    handleCalendar(e) {
      let self = this;
      const { action } = e.currentTarget.dataset;
      const { currentDate } = self.data;
      if (action == "prev") {
        let prevMonth = self.currentMonth - 1;
        let prevYear = self.currentYear;
        console.log(`prev:${prevYear}-${prevMonth}`);
        if (prevMonth < 1) {
          prevYear = self.currentYear - 1;
          prevMonth = 12;
        }
        self.calDays(prevYear, prevMonth);
        self.calEmptyGrid(prevYear, prevMonth);

        self.currentYear = prevYear;
        self.currentDate = moment(currentDate)
          .subtract(1, "months")
          .format("YYYY-MM-DD");
        self.currentMonth = prevMonth;
        self.$apply();
        console.log(`当前日期：${currentDate}`);
      } else {
        let nextMonth = self.currentMonth + 1;
        let nextYear = self.currentYear;
        if (nextMonth > 12) {
          nextYear = self.currentYear + 1;
          nextMonth = 1;
        }
        self.calDays(nextYear, nextMonth);
        self.calEmptyGrid(nextYear, nextMonth);

        self.currentYear = nextYear;
        self.currentMonth = nextMonth;
        self.currentDate = moment(currentDate)
          .add(1, "months")
          .format("YYYY-MM-DD");
        self.$apply();
        console.log(`当前日期：${currentDate}`);
      }
      // console.log(action)
    },
    handleDayItem(params) {
      console.log('onClick事件',params)
    }
  };
  onLoad() {
    let self = this;

    const weeks_ch = ["日", "一", "二", "三", "四", "五", "六"];
    self.calEmptyGrid(self.currentYear, self.currentMonth);
    self.calDays(self.currentYear, self.currentMonth);
    const thisMonthDays = new Date(
      moment().format("YYYY"),
      moment().format("MM"),
      0
    ).getDate();
    self.weeks_ch = weeks_ch;
    self.$apply();
  }
  onShow() {}
  // 计算每个月的轮空数
  calEmptyGrid(year, month) {
    let self = this;
    let firstDayOfWeek = new Date(Date.UTC(year, month - 1, 1)).getDay();
    let empytGrids = [];
    if (firstDayOfWeek > 0) {
      for (let i = 0; i < firstDayOfWeek; i++) {
        empytGrids.push(i);
      }
      self.empytGrids = empytGrids;
      self.hasEmptyGrid = true;
      self.$apply();
    } else {
      self.empytGrids = [];
      self.hasEmptyGrid = false;
      self.$apply();
    }
    // console.log(`每个月空格数:${self.empytGrids}`)
  }
  // 获取当月的天数
  calDays(year, month) {
    let self = this;
    const { currentDate } = self.data;
    let days = [];
    const thisMonthDays = new Date(year, month, 0).getDate(); // 获取当前月的天数(eg: 1月 31天)
    for (let i = 1; i <= thisMonthDays; i++) {
      let choosed =
        currentDate ==
        moment(`${year}-${month}-${i}`, "YYYY-MM-D").format("YYYY-MM-DD")
          ? true
          : false;
      days.push({
        dayDate: moment(`${year}-${month}-${i}`, "YYYY-MM-D").format(
          "YYYY-MM-DD"
        ), // 每天的完整日期
        day: i, // 每天的 日
        choosed // 是否是当天，如果是则为true
      });
    }
    self.days = days;
    self.$apply();
    console.log("days", self.days);
  }
}
</script>
