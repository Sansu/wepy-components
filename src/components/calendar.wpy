<style lang="less">
.com-calendar__container {
  .schedule-container {
    background: #fff;
    .calendar-container {
      .calendar-header {
        display: flex;
        text-align: center;
        justify-content: center;
        align-items: center;
        height: 100rpx;
        .prev-month,
        .next-month {
          flex: 0 0 180rpx;
        }
        .cur-month {
          flex: 1;
        }
      }
      .calendar-week {
        display: flex;
        justify-content: center;
        align-items: center;
        border-bottom: 1px solid #efefef;
        .weeks-grid {
          text-align: center;
          flex: 107.1428571429rpx;
          color: #dd5044;
        }
      }
      .calendar-days {
        display: flex;
        flex-wrap: wrap;
        .days-grid {
          // text-align: center;
          height: 100rpx;
          width: 107.1428571429rpx;
          border-bottom: 1px solid #eee;
          .day {
            margin: 20rpx auto;
            width: 60rpx;
            height: 60rpx;
            line-height: 60rpx;
            text-align: center;
            font-size: 28rpx;
          }
          .day-active {
            border: 1px solid #dd5044;
            border-radius: 50%;
          }
        }
      }
      .calendar-close {
        margin-top: 60rpx;
        image {
          display: block;
          margin: 0 auto;
          width: 60rpx;
          height: 60rpx;
        }
      }
    }
    .header {
      display: flex;
      height: 100rpx;
      border-bottom: 1px solid #efefef;
      .last-week {
        text-align: right;
      }
      .last-week,
      .next-week {
        flex: 0 0 180rpx;
        line-height: 110rpx;
        wxc-icon {
          color: #dd5044;
        }
      }
      .date {
        flex: 1;
        line-height: 110rpx;
        text-align: center;
      }
    }
    .content {
      .day {
        display: flex;
        margin-bottom: 20rpx;
        border-bottom: 1px solid #efefef;
        .item-box {
          flex: 0 0 14.2857%;
          text-align: center;
          .item-box-border {
            border-right: 1px solid #eee;
            .item-img {
              width: 100%;
              height: 40rpx;
              image {
                position: relative;
                top: 2rpx;
                left: 26rpx;
                width: 40rpx;
                height: 40rpx;
              }
            }
            .week-day {
              font-size: 24rpx;
              color: rgba(0, 0, 0, 0.8);
            }
            .week-item {
              padding-bottom: 12rpx;
              font-size: 24rpx;
            }
          }
        }
        .item-box:active {
          background: rgb(216, 63, 63);
        }
        .item-box-active {
          color: #dd5044;
          background: #f4cfcf;
        }
      }
      .my-lesson {
        display: flex;
        padding: 30rpx 18rpx;
        margin-top: 8rpx;
        background: #eee;
        .my-lesson-time {
          flex: 0 0 160rpx;
          padding: 8rpx 20rpx;
          text-align: center;
          font-size: 28rpx;
        }
        .my-lesson-brief {
          flex: 1;
          .teacher,
          .place {
            font-size: 28rpx;
            color: #888;
          }
        }
        .my-lesson-icon {
          flex: 0 0 70rpx;
          image {
            display: block;
            padding-top: 55rpx;
            margin: 0 auto;
            width: 50rpx;
            height: 50rpx;
          }
        }
      }
    }
    .footer {
      position: fixed;
      bottom: 0;
      width: 100%;
      max-width: 100%;
      height: 100rpx;
      background: #fff;
      .item {
        margin-top: 20rpx;
        width: 140rpx;
      }
      .status-icon {
        margin: 0 auto;
        width: 36rpx;
        height: 36rpx;
        border-radius: 50%;
      }
      .text {
        text-align: center;
        font-size: 28rpx;
      }
    }
  }
}
</style>
<template>
  <view class="com-calendar__container">
    <view class="schedule-container">
    <!-- Êó•ÂéÜË°®üìÖ -->
    <wxc-mask status="{{maskStatus}}" background-color="#fff" opacity="1" class="mask-animation">
      <view class="calendar-container">
        <view class="calendar-header">
          <view class="prev-month" @tap="handleCalendar" data-action="prev">‰∏ä‰∏ÄÊúà</view>
          <view class="cur-month">{{currentDate}}</view>
          <view class="next-month" @tap="handleCalendar" data-action="next">‰∏ã‰∏ÄÊúà</view>  
        </view>
        <view class="calendar-week">
          <repeat for="{{weeks_ch}}" item="week">
            <view class="weeks-grid">{{week}}</view>
          </repeat>
        </view>
        <view class="calendar-days">
          <view wx:if="{{true}}" class="days-grid" wx:for="{{empytGrids}}" wx:key="{{index}}" data-idx="{{index}}"></view>
          <repeat for="{{days}}" key="key" index="index" item="item">
            <view class="days-grid  " @tap="handleDayItem({{item.dayDate}})">
              <view class="day {{item.choosed ? 'day-active' : ''}}">{{item.day}}</view>
            </view>
          </repeat>
        </view>
      </view>
    </wxc-mask>
    </view>
  </view>
</template>
<script>
import wepy from "wepy";
import moment from "moment";

export default class Calendar extends wepy.component {
  props = {};
  data = {
    week: [
      { week: "Âë®Êó•" },
      { week: "Âë®‰∏Ä" },
      { week: "Âë®‰∫å" },
      { week: "Âë®‰∏â" },
      { week: "Âë®Âõõ" },
      { week: "Âë®‰∫î" },
      { week: "Âë®ÂÖ≠" }
    ],
    currentDate: moment().format("YYYY-MM-DD"), // Ëé∑ÂèñÂΩìÂâçÊó•Êúü YYYY-MM-DD
    thisMonthDays: [], // Ëé∑ÂèñÂΩìÂâçÊúà‰∏ÄÂÖ±Â§öÂ∞ëÂ§©
    currentMonth: parseInt(moment().format("MM")), // ÂΩìÂâçÊúà‰ªΩ
    currentYear: moment().year(), // ÂΩìÂâçÂπ¥‰ªΩ
    currentDay: moment().dayOfYear(), // ÂΩìÂâçÂ§©
    days: [], // ÊØè‰∏™ÊúàÁöÑÊØèÂ§©Êï∞ÁªÑ
    weeks_ch: [],
    empytGrids: [],
    hasEmptyGrid: false,
    maskStatus: "hide",
    todayEntity: [],
    currentDayData: [],
    unionuser: null
  };
  methods = {};
  onLoad() {
    let self = this;

    const weeks_ch = ["Êó•", "‰∏Ä", "‰∫å", "‰∏â", "Âõõ", "‰∫î", "ÂÖ≠"];
    self.calEmptyGrid(self.currentYear, self.currentMonth);
    self.calDays(self.currentYear, self.currentMonth);
    let week = self.week;
    const thisMonthDays = new Date(
      moment().format("YYYY"),
      moment().format("MM"),
      0
    ).getDate();
    const theWeekFirstDay = parseInt(
      moment()
        .startOf("week")
        .format("DD")
    ); // Ëé∑ÂèñÊú¨Âë®ÁöÑÁ¨¨‰∏ÄÂ§©
    for (let i = 0; i < 7; i++) {
      week[i].day = moment()
        .dayOfYear(theWeekFirstDay + i)
        .format("DD"); // ÂàùÂßãÂåñweekÊï∞ÁªÑ
      week[i].date = moment()
        .dayOfYear(theWeekFirstDay + i)
        .format("YYYY-MM-DD"); // ÂàùÂßãÂåñweekÊï∞ÁªÑ
    }
    self.weeks_ch = weeks_ch;
    self.week = week;
    self.$apply();
  }
  onShow() {
    let self = this;
    const { currentDate } = self.data;
    const theWeekFirstDay = moment(currentDate)
      .startOf("week")
      .format("YYYY-MM-DD"); // Ëé∑ÂèñËØ•Êó•ÊúüÊâÄÂú®Âë®ÁöÑÁ¨¨‰∏ÄÂ§©
    const theWeekLastDay = moment(currentDate)
      .endOf("week")
      .format("YYYY-MM-DD"); // Ëé∑ÂèñËØ•Êó•ÊúüÊâÄÂú®Âë®ÁöÑÊúÄÂêé‰∏ÄÂë®
    self.querySchedule(theWeekFirstDay, theWeekLastDay);
  }
  // ËÆ°ÁÆóÊØè‰∏™ÊúàÁöÑËΩÆÁ©∫Êï∞
  calEmptyGrid(year, month) {
    let self = this;
    let firstDayOfWeek = new Date(Date.UTC(year, month - 1, 1)).getDay();
    let empytGrids = [];
    if (firstDayOfWeek > 0) {
      for (let i = 0; i < firstDayOfWeek; i++) {
        empytGrids.push(i);
      }
      self.empytGrids = empytGrids;
      self.hasEmptyGrid = true;
      self.$apply();
    } else {
      self.empytGrids = [];
      self.hasEmptyGrid = false;
      self.$apply();
    }
    // console.log(`ÊØè‰∏™ÊúàÁ©∫Ê†ºÊï∞:${self.empytGrids}`)
  }
  // Ëé∑ÂèñÂΩìÊúàÁöÑÂ§©Êï∞
  calDays(year, month) {
    let self = this;
    const { currentDate } = self.data;
    let days = [];
    const thisMonthDays = new Date(year, month, 0).getDate(); // Ëé∑ÂèñÂΩìÂâçÊúàÁöÑÂ§©Êï∞(eg: 1Êúà 31Â§©)
    for (let i = 1; i <= thisMonthDays; i++) {
      let choosed =
        currentDate ==
        moment(`${year}-${month}-${i}`, "YYYY-MM-D").format("YYYY-MM-DD")
          ? true
          : false;
      days.push({
        dayDate: moment(`${year}-${month}-${i}`, "YYYY-MM-D").format(
          "YYYY-MM-DD"
        ), // ÊØèÂ§©ÁöÑÂÆåÊï¥Êó•Êúü
        day: i, // ÊØèÂ§©ÁöÑ Êó•
        choosed // ÊòØÂê¶ÊòØÂΩìÂ§©ÔºåÂ¶ÇÊûúÊòØÂàô‰∏∫true
      });
    }
    self.days = days;
    self.$apply();
  }
}
</script>
